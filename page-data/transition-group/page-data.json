{"componentChunkName":"component---src-templates-component-js","path":"/transition-group","result":{"data":{"site":{"siteMetadata":{"componentPages":[{"path":"/transition","displayName":"Transition","codeSandboxId":null},{"path":"/css-transition","displayName":"CSSTransition","codeSandboxId":"m77l2vp00x"},{"path":"/switch-transition","displayName":"SwitchTransition","codeSandboxId":"switchtransition-component-iqm0d"},{"path":"/transition-group","displayName":"TransitionGroup","codeSandboxId":"00rqyo26kn"}]}},"metadata":{"displayName":"TransitionGroup","composes":null,"description":{"childMarkdownRemark":{"html":"<p>The <code class=\"language-text\">&lt;TransitionGroup&gt;</code> component manages a set of transition components\n(<code class=\"language-text\">&lt;Transition&gt;</code> and <code class=\"language-text\">&lt;CSSTransition&gt;</code>) in a list. Like with the transition\ncomponents, <code class=\"language-text\">&lt;TransitionGroup&gt;</code> is a state machine for managing the mounting\nand unmounting of components over time.</p>\n<p>Consider the example below. As items are removed or added to the TodoList the\n<code class=\"language-text\">in</code> prop is toggled automatically by the <code class=\"language-text\">&lt;TransitionGroup&gt;</code>.</p>\n<p>Note that <code class=\"language-text\">&lt;TransitionGroup&gt;</code>  does not define any animation behavior!\nExactly <em>how</em> a list item animates is up to the individual transition\ncomponent. This means you can mix and match animations across different list\nitems.</p>"}},"props":[{"name":"component","required":false,"type":{"name":"any","value":null,"raw":null},"defaultValue":{"value":"'div'","computed":false},"description":{"childMarkdownRemark":{"html":"<p><code class=\"language-text\">&lt;TransitionGroup&gt;</code> renders a <code class=\"language-text\">&lt;div&gt;</code> by default. You can change this\nbehavior by providing a <code class=\"language-text\">component</code> prop.\nIf you use React v16+ and would like to avoid a wrapping <code class=\"language-text\">&lt;div&gt;</code> element\nyou can pass in <code class=\"language-text\">component={null}</code>. This is useful if the wrapping div\nborks your css styles.</p>"}},"doclets":[]},{"name":"children","required":false,"type":{"name":"node","value":null,"raw":null},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A set of <code class=\"language-text\">&lt;Transition&gt;</code> components, that are toggled <code class=\"language-text\">in</code> and out as they\nleave. the <code class=\"language-text\">&lt;TransitionGroup&gt;</code> will inject specific transition props, so\nremember to spread them through if you are wrapping the <code class=\"language-text\">&lt;Transition&gt;</code> as\nwith our <code class=\"language-text\">&lt;Fade&gt;</code> example.</p>\n<p>While this component is meant for multiple <code class=\"language-text\">Transition</code> or <code class=\"language-text\">CSSTransition</code>\nchildren, sometimes you may want to have a single transition child with\ncontent that you want to be transitioned out and in when you change it\n(e.g. routes, images etc.) In that case you can change the <code class=\"language-text\">key</code> prop of\nthe transition child as you change its content, this will cause\n<code class=\"language-text\">TransitionGroup</code> to transition the child out and back in.</p>"}},"doclets":[]},{"name":"appear","required":false,"type":{"name":"bool","value":null,"raw":null},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A convenience prop that enables or disables appear animations\nfor all children. Note that specifying this will override any defaults set\non individual children Transitions.</p>"}},"doclets":[]},{"name":"enter","required":false,"type":{"name":"bool","value":null,"raw":null},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A convenience prop that enables or disables enter animations\nfor all children. Note that specifying this will override any defaults set\non individual children Transitions.</p>"}},"doclets":[]},{"name":"exit","required":false,"type":{"name":"bool","value":null,"raw":null},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A convenience prop that enables or disables exit animations\nfor all children. Note that specifying this will override any defaults set\non individual children Transitions.</p>"}},"doclets":[]},{"name":"childFactory","required":false,"type":{"name":"Function(child: ReactElement) -> ReactElement","value":null,"raw":null},"defaultValue":{"value":"child => child","computed":false},"description":{"childMarkdownRemark":{"html":"<p>You may need to apply reactive updates to a child as it is exiting.\nThis is generally done by using <code class=\"language-text\">cloneElement</code> however in the case of an exiting\nchild the element has already been removed and not accessible to the consumer.</p>\n<p>If you do need to update a child as it leaves you can provide a <code class=\"language-text\">childFactory</code>\nto wrap every child, even the ones that are leaving.</p>"}},"doclets":[{"tag":"type","value":"Function(child: ReactElement) -> ReactElement"}]}]}},"pageContext":{"displayName":"TransitionGroup"}},"staticQueryHashes":[]}